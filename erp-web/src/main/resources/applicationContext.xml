<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:soap="http://cxf.apache.org/bindings/soap"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://cxf.apache.org/bindings/soap 
						http://cxf.apache.org/schemas/configuration/soap.xsd
						http://cxf.apache.org/jaxws 
						http://cxf.apache.org/schemas/jaxws.xsd
						">
	
	<!-- 加载属性文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
				
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
		<property name="user" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 配置LocalSessionFactoryBean，spring提供的用于整合hibernate的工厂bean -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 注入hibernate相关的属性配置 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<!-- 注入hibernate的映射文件 -->
		<property name="mappingLocations">
			<list>
				<value>classpath:com/ahpu/erp/domain/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 组件扫描 -->
	<context:component-scan base-package="com.ahpu.erp"/>
	
	<!-- 支持spring注解 -->
	<context:annotation-config/>
	
	<tx:annotation-driven/>
	
	<bean id ="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入安全管理器对象 -->
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.jsp" />
		<property name="successUrl" value="/index.jsp" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<!--注入URL拦截规则 -->
		<property name="filterChainDefinitions">
			<value>
				/css/**=anon
				/js/**=anon
				/images/**=anon
				/validatecode.jsp*=anon
				/login.jsp=anon
				/empAction_login.action=anon
				/*=authc
			</value>
		</property>
	</bean>
	<!-- 注册安全管理器对象 -->
	<bean id ="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="erpRealm" />
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	<!-- 注册缓存管理器 -->
	<bean id="ehCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>
	<bean id="erpRealm" class="com.ahpu.erp.service.realm.ErpRealm" />
	<!-- 开启shiro框架注解支持 -->
	<bean id="DefaultAdvisorAutoProxyCreator" 
		  class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		  <!-- 必须使用cglib方式为action对象创建代理对象 -->
		  <property name="proxyTargetClass" value="true" />
	</bean>
	<!-- 配置shiro框架提供的切面类，用于创建代理对象 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor" />
	
	<!-- 注册自定义作业 -->
	<bean id="autoAssignJobs" class = "com.ahpu.erp.service.jobs.autoAssignJobs">
		<property name="mailSender" ref="mailSender" />
	</bean>
	
	<!-- 配置jobDetail -->
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean" >
		<property name="targetObject" ref="autoAssignJobs" />
		<!-- 注入目标方法 -->
		<property name="targetMethod" value="goodsPurchaseNumUpdate" />
	</bean>
	<bean id="jobDetail2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean" >
		<property name="targetObject" ref="autoAssignJobs" />
		<!-- 注入目标方法 -->
		<property name="targetMethod" value="storeWarn" />
	</bean>
	
	<!-- 配置触发器 -->
	<bean id="myTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 注入任务详情对象 -->
		<property name="jobDetail" ref="jobDetail" />
		<!-- 注入cron表达式，通过这个表达式指定触发的时间点 -->
		<property name="cronExpression">
			<value>0 0/30 * * * ?</value>
		</property>
	</bean>
	<bean id="myTrigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 注入任务详情对象 -->
		<property name="jobDetail" ref="jobDetail2" />
		<!-- 注入cron表达式，通过这个表达式指定触发的时间点 -->
		<property name="cronExpression">
			<value>0 0/30 * * * ?</value>
		</property>
	</bean>
	
	<!-- 定义调度工厂 -->
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 注入触发器 -->
		<property name="triggers">
			<list>
				<ref bean="myTrigger"/>
				<ref bean="myTrigger2"/>
			</list>
		</property>
	</bean>
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<!-- 基于校验规则的邮件发送方式 -->
		<!-- SMTP协议介绍 -->
		<property name="host" value="smtp.163.com" />
		<property name="username" value="13170036608" />
		<property name="password" value="dllnn19961228" />
		<property name="javaMailProperties">
			<props>
				<!-- 必须进行授权认证，它的目的就是阻止他人任意乱发邮件 -->
				<prop key="mail.smtp.auth">true</prop>
				<!-- SMTP加密方式:连接到一个TLS保护连接 -->
				<prop key="mail.smtp.starttls.enable">true</prop>
				<!-- 设置邮件发送超时时间 -->
				<prop key="mail.smtp.timeout">25000</prop>  
			</props>
		</property>
	</bean>
</beans>
